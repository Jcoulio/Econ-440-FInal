# Cleaning and Formating Data
```{r include=FALSE}
#Omitted all observations with N/A values
data <- na.omit(data)
#Divided Money Variables by GDP Deflator to adjust for inflation across time
data_adj <- data %>% 
  mutate(
    AssetsTotal = AssetsTotal / GDPDeflator,
    CapitalExpenditures = CapitalExpenditures / GDPDeflator,
    CostofGoodsSold = CostofGoodsSold / GDPDeflator,
    DepreciationandAmortization = DepreciationandAmortization / GDPDeflator,
    DepreciationDepletionandAmor = DepreciationDepletionandAmor / GDPDeflator,
    OperatingIncomeBeforeDeprecia = OperatingIncomeBeforeDeprecia / GDPDeflator,
    PropertyPlantandEquipment = PropertyPlantandEquipment / GDPDeflator,
    SalesTurnoverNet = SalesTurnoverNet / GDPDeflator,
    A_MEAN = A_MEAN / GDPDeflator
  )

#Convert data from long to wide by summing, averaging, or assigning values across the years where it makes sense. Avg # of workers across time and summing sales turnover for example.
df <- data_adj %>% 
  group_by(GlobalCompanyKey) %>%
  summarise(
    fworkers=mean(fworkers, na.rm =TRUE), #mean fworkers
    A_MEAN=mean(A_MEAN, na.rm=TRUE), #mean wages
    AssetsTotal=mean(AssetsTotal, na.rm =TRUE), #Mean Assets
    CapitalExpenditures=sum(CapitalExpenditures, na.rm =TRUE), #Sum Capital Expenditures
    CostofGoodsSold=sum(CostofGoodsSold, na.rm =TRUE), #sum cost of goods sold
    DepreciationandAmortization=sum(DepreciationandAmortization, na.rm =TRUE), #sum Depreciation and...
    DepreciationDepletionandAmor=sum(DepreciationDepletionandAmor, na.rm =TRUE), #sum Dep..Deple...
    Employees=mean(Employees, na.rm =TRUE), #mean employees
    OperatingIncomeBeforeDeprecia=mean(OperatingIncomeBeforeDeprecia, na.rm =TRUE), #mean operating Income
    PropertyPlantandEquipment=mean(PropertyPlantandEquipment, na.rm =TRUE), # mean PPE
    SalesTurnoverNet=sum(SalesTurnoverNet, na.rm =TRUE), #sum sales turnover
    City=max(City, na.rm =TRUE), #assign city
    NorthAmericanIndustryClassifi=max(NorthAmericanIndustryClassifi, na.rm =TRUE), #assign industry
    StateProvince=max(StateProvince, na.rm =TRUE) #assign state
  )
```

# Getting Data Ready for Analysis
```{r}
#Get Industry Avg Wage in a new dataframe
df_fill <- df %>%
  group_by(NorthAmericanIndustryClassifi) %>% #group by NorthAmericanIndustryClassi
  summarise(
    A_MEAN=mean(A_MEAN, na.rm =TRUE) #get average wage per industry
  )
df_fill$IndustryAvgWage <- df_fill$A_MEAN #renamed column just for visual purposes

#merge the data with the full dataset to get new column with avg wage per industry
df_merged <- merge(df_fill, df, by = "NorthAmericanIndustryClassifi")
#remove A_mean.x column its redundent
df_merged <- df_merged[,!grepl("A_MEAN.x",names(df_merged))]
#Calucluate Percent different wages payed vs industry avg
df_merged$PercentDiffAvgWages <- ((df_merged$A_MEAN.y - df_merged$IndustryAvgWage) / df_merged$IndustryAvgWage)

#Calculating ROA as a decimal
df_merged <- filter(df_merged, AssetsTotal > 1)
df_merged$OperatingROA <- (df_merged$OperatingIncomeBeforeDeprecia / df_merged2$AssetsTotal)
#Remove any less than plus or minus %10 to avoid two companies with very similar wages being compared as if they are different.
df_merged2 <- filter(df_merged, df_merged$PercentDiffAvgWages < -.10 | df_merged$PercentDiffAvgWages > 0.01)
#binary variabvle pay less than industry avg 1, more than indistry avg 0
df_merged2$LowerWages <- ifelse(df_merged2$PercentDiffAvgWages > 0, 0, 1)


mydata <- df_merged2
```

# Running Regression
```{r}
head(mydata)
#Simple OLS
model_OLS <- lm(
   OperatingROA ~ LowerWages + fworkers + AssetsTotal + CapitalExpenditures + CostofGoodsSold + DepreciationandAmortization + DepreciationDepletionandAmor +
   PropertyPlantandEquipment + SalesTurnoverNet + Employees, data = mydata
)
mydata
plot(df_merged$PercentDiffAvgWages, df_merged$OperatingROA, xlim = c(-.2,.2), ylim = c(-.2, .2), xlab =
       "Difference in Avg Wages from Industry Average", ylab = "OperatingROA (Decimal)",main = "Figure 1")

plot(df_merged2$PercentDiffAvgWages, df_merged2$OperatingROA, xlim = c(-.2,.2), ylim = c(-.2, .2), xlab = "Difference in Avg Wages from Industry Average", ylab = "OperatingROA (Decimal)",main = "Figure 2 (filtered)")
tidy(model_OLS)
```

```{r}

```





```{r}
#Propensity Score Matching method 1 with nice output
match_obj <- matchit(
  LowerWages ~ fworkers + AssetsTotal + CapitalExpenditures + CostofGoodsSold + DepreciationDepletionandAmor + PropertyPlantandEquipment + SalesTurnoverNet + Employees, 
  data = mydata, method = "nearest", distance = "glm", 
  replace = TRUE
)
plot(match_obj, type = "jitter", interactive = FALSE)
plot(summary(match_obj), abs = FALSE)

matched_data
matched_data <- match.data(match_obj)
res <- lm(OperatingROA ~ LowerWages, data = matched_data, weights = weights)
coeftest(res, vcov = vcovHC(res, type = 'HC1'))

summary(match_obj)
```



```{r include=FALSE}
#METHOD 2 to double check just ignore this 
library(Matching)
attach(mydata)

treat <- cbind(LowerWages)
outcome <- cbind(OperatingROA)
controls <- cbind(
  fworkers, AssetsTotal, CapitalExpenditures, CostofGoodsSold,
  DepreciationDepletionandAmor, PropertyPlantandEquipment,  SalesTurnoverNet, Employees
)

glm1 <- glm(treat ~ controls, family = binomial, data=mydata)
summary(glm1)

rr1 <- Match(Y = OperatingROA, Tr = treat, X = glm1$fitted, replace = TRUE)
summary(rr1)

MatchBalance(treat ~ controls, match.out = rr1, nboots=0, data=mydata)
```


```{r}
#getting summaries for the variables used

fivenum(mydata$)
```

